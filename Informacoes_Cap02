#Isso é um comentário de uma linha

"""
  Isso é um comentário em bloco
"""

Números e Operações Matemáticas.
Os que mais são usados números inteiros e float. 

Explicações de funções built in python 3
https://docs.python.org/3.3/library/functions.html

Com relação aos operadores relacionais, Python é parecido com Java. 
== / Igualdade - Equivalência
!= / Diferente de
>
<
>=
<=

Só é diferente do Shell Script.

Operações Matemáticas
4 + 4 #Soma
4 - 4 #Subtração
4 / 3 #Divisão; o resultado será em float
1.3333333333333333

4 // 3 #Divisão;  o resultado será arredondado e exibido em int
1

4 * 3 #Multiplicação; o resultado será em int.
12

#Conversão de números. 

#Detalhe que não está ocorrendo arredondamento. 
#A função int está pegando apenas a parte int do número e exibindo.
int(9.8)
9

#Está convertando o número int 5 para float 5.0
float(5)
5.0


#Função para arredondamento de número float.
>>> round(5.54321 ,2) #Pegou 2 números depois do ponto.
5.54

>>> round(5.57321 ,1) #Pegou 1 número depois do ponto e fez o arredondamento matemático.
5.6


################################################################################################################################

Variáveis:
a = 10 #variável a recebe o valor 10
a = 15 #agora a variavé "a" não é mais 10 e sim 15. 

Operadores de Atribuição:
>>> print(var) #variável var tem o valor 0
0
>>> var += 10 #variável var tem o valor 10
>>> print(var)
10
>>> var -= 5 #variável var teve subtraído 5, ou seja, no passo acima ela valia 10 agora vale 5 pois 10-5 = 5.
>>> print(var)
5
>>> var /= 2 #variável var teve divisão por 2, ou seja, no passo acima ela valia 5 agora vale 2.5 pois 5/2 = 2.5.
>>> print(var)
2.5
>>>
>>>
>>> var *= 4 #variável var foi múltiplicada por 4, ou seja, no passo acima ela valia 2.5 agora vale 10.0 pois 2.5*4 = 10.0
>>> print(var)
10.0

################################################################################################################################

STRINGS
Não muda muito do que outras linguagens. 

Indexação de String #Eu entendi que está tratando a string como um array em outras lingaguens e posso acessar cada elemento da string
>>> nome = "Dalton"
>>> print(nome)
Dalton
>>> print(nome[0])
D
>>> print(nome[2])
l

formas de "recortar" uma string
nome="Dalton"
print(nome[2:]) #Imprime a partir da posição 2 da string, começando na posição 0.
lton

print(nome[:3]) #Imprime as 3 primeiras posições da string. 
Dal

>>> print(nome[-1]) #Imprime o último carácter da string
n 

>>> print(nome[:-1]) #Imprime todas os caracteres MENOS o último.
Dalto

Mais exemplo de como "recortar" uma string;
>>> d="DaltonAugustoSoares"
>>> d[:6]
'Dalton'
>>> nome=d[:6]
>>> print(nome)
Dalton
>>> sobrenome=d[13:]
>>> d[13:]
'Soares'
>>> 
>>> print(sobrenome)
Soares
>>> fullName=nome+" "+sobrenome
>>> print(fullName)
Dalton Soares


Transformando string Maiúsculo ou Minúsculo;
>>> print(d)
DaltonAugustoSoares

>>> d.lower()           #Transformando em minúscula.
'daltonaugustosoares'
>>> 
>>> d.upper()           #Transformando em maiúscula. 
'DALTONAUGUSTOSOARES'

nome="dalton"
nome.capitalize() #Coloca a primeira letra em maiúsculo. 
Dalton

Exemplos de split.
>>> frase="Hello, Word"
>>> frase.split(',')
['Hello', ' Word']
>>> frase.split(',')[0]
'Hello'
>>> frase.split(',')[1]
' Word'
>>> 

Exemplo de split com capitalize. #Capitalize deixa a primeira letra maíscula.
>>> d
'dalton augusto soares'
>>> d.split()
['dalton', 'augusto', 'soares']
>>> nome=d.split()[0]
>>> nome
'dalton'
>>> nomeDoMeio=nome=d.split()[1]
>>> nomeDoMeio
'augusto'
>>> 
>>> sobrenome=d.split()[2]
>>> sobrenome
'soares'
>>> fullName=nome.capitalize()+" "+nomeDoMeio.capitalize()+" "+sobrenome.capitalize()
>>> fullName
'Augusto Augusto Soares'

###################################################################################################

Listas #Entendi que lista é como se fosse array em outras linguagens. 
>>> print(lista)
['ovo', 'maça', 'leite']
>>> print(lista[0]) #Imprimindo primeiro elemento da lista
ovo
>>> print(lista[-1]) #Imprimindo último elemento da lista
leite
>>> print(lista[1]) ##Imprimindo segundo elemento da lista
maça
>>> 

Buscando um elemento dentro de uma lista
"maça" in lista
True

"pera" in lista
False

>>> lista.append("pera") #Adicionando o item pera na última posição da lista
>>> lista
['ovo', 'maça', 'leite', 'pera']
>>> 
>>> lista.insert(2,"uva") #Adicionando o item uva na posição 2
>>> lista
['ovo', 'maça', 'uva', 'leite', 'pera']
>>> 
>>> lista.pop() #Removendo o último item da lista e retornando o nome dele.
'pera'
>>> lista
['ovo', 'maça', 'uva', 'leite']
>>> 
>>> lista.pop(1) #Removendo o item na posição 1.
'maça'
>>> lista
['ovo', 'uva', 'leite']

Referência sobre listas
https://www.devmedia.com.br/como-trabalhar-com-listas-em-python/37460



